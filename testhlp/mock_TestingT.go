// Code generated by mockery v2.42.0. DO NOT EDIT.

package testhlp

import mock "github.com/stretchr/testify/mock"

// MockTestingT is an autogenerated mock type for the TestingT type
type MockTestingT struct {
	mock.Mock
}

type MockTestingT_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTestingT) EXPECT() *MockTestingT_Expecter {
	return &MockTestingT_Expecter{mock: &_m.Mock}
}

// Errorf provides a mock function with given fields: format, args
func (_m *MockTestingT) Errorf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockTestingT_Errorf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Errorf'
type MockTestingT_Errorf_Call struct {
	*mock.Call
}

// Errorf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockTestingT_Expecter) Errorf(format interface{}, args ...interface{}) *MockTestingT_Errorf_Call {
	return &MockTestingT_Errorf_Call{Call: _e.mock.On("Errorf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockTestingT_Errorf_Call) Run(run func(format string, args ...interface{})) *MockTestingT_Errorf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockTestingT_Errorf_Call) Return() *MockTestingT_Errorf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTestingT_Errorf_Call) RunAndReturn(run func(string, ...interface{})) *MockTestingT_Errorf_Call {
	_c.Call.Return(run)
	return _c
}

// Fail provides a mock function with given fields:
func (_m *MockTestingT) Fail() {
	_m.Called()
}

// MockTestingT_Fail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fail'
type MockTestingT_Fail_Call struct {
	*mock.Call
}

// Fail is a helper method to define mock.On call
func (_e *MockTestingT_Expecter) Fail() *MockTestingT_Fail_Call {
	return &MockTestingT_Fail_Call{Call: _e.mock.On("Fail")}
}

func (_c *MockTestingT_Fail_Call) Run(run func()) *MockTestingT_Fail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTestingT_Fail_Call) Return() *MockTestingT_Fail_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTestingT_Fail_Call) RunAndReturn(run func()) *MockTestingT_Fail_Call {
	_c.Call.Return(run)
	return _c
}

// FailNow provides a mock function with given fields:
func (_m *MockTestingT) FailNow() {
	_m.Called()
}

// MockTestingT_FailNow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FailNow'
type MockTestingT_FailNow_Call struct {
	*mock.Call
}

// FailNow is a helper method to define mock.On call
func (_e *MockTestingT_Expecter) FailNow() *MockTestingT_FailNow_Call {
	return &MockTestingT_FailNow_Call{Call: _e.mock.On("FailNow")}
}

func (_c *MockTestingT_FailNow_Call) Run(run func()) *MockTestingT_FailNow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTestingT_FailNow_Call) Return() *MockTestingT_FailNow_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTestingT_FailNow_Call) RunAndReturn(run func()) *MockTestingT_FailNow_Call {
	_c.Call.Return(run)
	return _c
}

// Helper provides a mock function with given fields:
func (_m *MockTestingT) Helper() {
	_m.Called()
}

// MockTestingT_Helper_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Helper'
type MockTestingT_Helper_Call struct {
	*mock.Call
}

// Helper is a helper method to define mock.On call
func (_e *MockTestingT_Expecter) Helper() *MockTestingT_Helper_Call {
	return &MockTestingT_Helper_Call{Call: _e.mock.On("Helper")}
}

func (_c *MockTestingT_Helper_Call) Run(run func()) *MockTestingT_Helper_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTestingT_Helper_Call) Return() *MockTestingT_Helper_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTestingT_Helper_Call) RunAndReturn(run func()) *MockTestingT_Helper_Call {
	_c.Call.Return(run)
	return _c
}

// Log provides a mock function with given fields: args
func (_m *MockTestingT) Log(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockTestingT_Log_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Log'
type MockTestingT_Log_Call struct {
	*mock.Call
}

// Log is a helper method to define mock.On call
//   - args ...interface{}
func (_e *MockTestingT_Expecter) Log(args ...interface{}) *MockTestingT_Log_Call {
	return &MockTestingT_Log_Call{Call: _e.mock.On("Log",
		append([]interface{}{}, args...)...)}
}

func (_c *MockTestingT_Log_Call) Run(run func(args ...interface{})) *MockTestingT_Log_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockTestingT_Log_Call) Return() *MockTestingT_Log_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTestingT_Log_Call) RunAndReturn(run func(...interface{})) *MockTestingT_Log_Call {
	_c.Call.Return(run)
	return _c
}

// Logf provides a mock function with given fields: format, args
func (_m *MockTestingT) Logf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockTestingT_Logf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logf'
type MockTestingT_Logf_Call struct {
	*mock.Call
}

// Logf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockTestingT_Expecter) Logf(format interface{}, args ...interface{}) *MockTestingT_Logf_Call {
	return &MockTestingT_Logf_Call{Call: _e.mock.On("Logf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockTestingT_Logf_Call) Run(run func(format string, args ...interface{})) *MockTestingT_Logf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockTestingT_Logf_Call) Return() *MockTestingT_Logf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTestingT_Logf_Call) RunAndReturn(run func(string, ...interface{})) *MockTestingT_Logf_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTestingT creates a new instance of MockTestingT. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTestingT(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTestingT {
	mock := &MockTestingT{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
